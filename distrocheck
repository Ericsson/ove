#!/usr/bin/env bash
# SPDX-License-Identifier: MIT
#
# MIT License
#
# Copyright (c) 2021 Ericsson
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
# OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
# OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

ephemeral=0
container_ip=""
container_name=""
tag=""
_user=
use_ssh=0

function _echo {
	if [[ ${OVE_DISTROCHECK_STEPS} == *verbose* ]]; then
		ove-echo stderr "$*"
	fi

	return 0
}

function container_command {
	if command -v incus > /dev/null; then
		echo "incus"
	elif command -v lxc > /dev/null; then
		echo "lxc"
	else
		echo "error: no supported container runtime found" 1>&2
		return 1
	fi

	return 0
}

function init {
	local c
	local s

	if ! c=$(container_command); then
		return 1
	elif [ $# -ne 2 ]; then
		echo "usage: $(basename "$0") file|project|unittest distro"
		exit 1
	fi

	if [ "$1" = "unittest" ]; then
		unittest=1
		OVE_DISTROCHECK_STEPS="ove verbose user"

		if ! command -v shunit2 > /dev/null; then
			echo "error: command 'shunit2' not found" 1>&2
			exit 1
		fi
	else
		unittest=0
		distcheck="$1"
	fi

	bash_opt=""
	distro="$2"

	if [[ ${OVE_DISTROCHECK_STEPS} == *X* ]]; then
		if ! command -v xpra > /dev/null; then
			echo "error: command 'xpra' not found" 1>&2
			exit 1
		fi
		OVE_DISTROCHECK_STEPS+=" ssh"
		OVE_DISTROCHECK_STEPS+=" ssh_config"
		if [ "${OVE_DISTROCHECK_XPRA_DE}" = "" ]; then
			OVE_DISTROCHECK_XPRA_DE="xfce"
			OVE_DISTROCHECK_XPRA_DE_CMD="xfce4-session"
		elif [ "${OVE_DISTROCHECK_XPRA_DE_CMD}" = "" ]; then
			echo "error: specify how to start '${OVE_DISTROCHECK_XPRA_DE}' in OVE_DISTROCHECK_XPRA_DE_CMD" 1>&2
			exit 1
		fi
	fi

	if [ "${OVE_DISTROCHECK_CONTAINER_USER}" != "" ]; then
		container_user="${OVE_DISTROCHECK_CONTAINER_USER}"
	else
		container_user="${OVE_USER}"
	fi

	if [ ! -v OVE_DISTROCHECK_STEPS ]; then
		OVE_DISTROCHECK_STEPS=""
	fi

	container_global_flags=""
	if [[ ${OVE_DISTROCHECK_STEPS} == *verbose* ]]; then
		for s in ${OVE_DISTROCHECK_STEPS//:/ };do
			echo ${s}
		done
	elif "${c}" -h | grep -q '\-q'; then
		container_global_flags+=" -q"
	fi

	if [[ ${OVE_DISTROCHECK_STEPS} == *ssh* ]]; then
		if ! command -v sshpass > /dev/null; then
			echo "error: command 'sshpass' not found" 1>&2
			exit 1
		fi
		ssh_opts=""
	        ssh_opts+=" -o GlobalKnownHostsFile=/dev/null"
		ssh_opts+=" -o StrictHostKeyChecking=no"
		ssh_opts+=" -o UserKnownHostsFile=/dev/null"
	fi
}

function run {
	local sleep_s

	_echo "[${distro}]$ $*"
	while true; do
		if eval "$@" 2> "${OVE_TMP}/${tag:?}.err"; then
			return 0
		fi

		_echo "error: '$*' failed for distro '${distro}'"
		if [ ! -s "${OVE_TMP}/${tag}.err" ]; then
			if [ "x${NO_EXIT}" = "x1" ]; then
				return 1
			else
				exit 1
			fi
		fi

		sleep_s=$((RANDOM%10))
		if grep "^Error:.*i/o timeout" "${OVE_TMP}/${tag}.err"; then
			_echo "lxd: i/o timeout. Retry in ${sleep_s} sec"
			sleep ${sleep_s}
			continue
		elif grep "^Error: websocket:" "${OVE_TMP}/${tag}.err"; then
			_echo "lxd: websocket error. Retry in ${sleep_s} sec"
			sleep ${sleep_s}
			continue
		elif grep "^Error: Missing event connection with target cluster member" "${OVE_TMP}/${tag}.err"; then
			_echo "lxd: cluster error. Retry in ${sleep_s} sec"
			sleep ${sleep_s}
			continue
		elif grep "^Error: Operation not found" "${OVE_TMP}/${tag}.err"; then
			_echo "lxd: operation not found error. Retry in ${sleep_s} sec"
			sleep ${sleep_s}
			continue
		elif grep -q "^Error: Command not found" "${OVE_TMP}/${tag}.err"; then
			true
		else
			cat "${OVE_TMP}/${tag}.err"
		fi

		if [ "x${NO_EXIT}" = "x1" ]; then
			return 1
		else
			exit 1
		fi
	done
}

function run_no_exit {
	if ! NO_EXIT=1 run "$@"; then
		return 1
	fi
}

function ssh_exec {
       local prefix

       _echo "ssh ${_user}@${container_ip} $*"
       # shellcheck disable=SC2086
       if ! ssh \
	       -F /dev/null \
	       -t \
	       -q \
	       ${ssh_opts} \
	       ${_user:?}@${container_ip} "$@"; then
               return 1
       fi

       return 0
}

function container_exec {
	local e
	local container_exec_options

	if [ ${use_ssh} -eq 1 ]; then
		if ! ssh_exec "$@"; then
			return 1
		fi
		return 0
	fi

	container_exec_options=""
	if [[ ${package_manager} == apt-get* ]];  then
		container_exec_options+=" --env DEBIAN_FRONTEND=noninteractive"
	fi

	for e in ftp_proxy http_proxy https_proxy; do
		if [ "x${!e}" = "x" ]; then
			continue
		fi
		container_exec_options+=" --env ${e}=${!e}"
	done

	if [ "x${CONTAINER_EXEC_EXTRA}" != "x" ]; then
		container_exec_options+=" ${CONTAINER_EXEC_EXTRA}"
	fi

	run "$(container_command)${container_global_flags} exec${container_exec_options} ${container_name} -- $*"
}

function container_exec_no_exit {
	local e
	local container_exec_options

	if [ ${use_ssh} -eq 1 ]; then
		if ! ssh_exec "$@"; then
			return 1
		fi
		return 0
	fi

	container_exec_options=""
	if [[ ${package_manager} == apt-get* ]];  then
		container_exec_options+=" --env DEBIAN_FRONTEND=noninteractive"
	fi

	for e in ftp_proxy http_proxy https_proxy; do
		if [ "x${!e}" = "x" ]; then
			continue
		fi
		container_exec_options+=" --env ${e}=${!e}"
	done

	if [ "x${CONTAINER_EXEC_EXTRA}" != "x" ]; then
		container_exec_options+=" ${CONTAINER_EXEC_EXTRA}"
	fi

	if ! run_no_exit "$(container_command)${container_global_flags} exec${container_exec_options} ${container_name} -- $*"; then
		return 1
	fi
}

function package_manager_noconfirm {
	container_exec "bash ${bash_opt} -c '${prefix}; ove-add-config \$HOME/.oveconfig OVE_INSTALL_PKG 1'"

	if [[ ${package_manager} == apt-get* ]];  then
		container_exec "bash ${bash_opt} -c '${prefix}; ove-add-config \$HOME/.oveconfig OVE_OS_PACKAGE_MANAGER_ARGS -y -qq -o=Dpkg::Progress=0 -o=Dpkg::Progress-Fancy=false install'"
	elif [[ ${package_manager} == pacman* ]]; then
		container_exec "bash ${bash_opt} -c '${prefix}; ove-add-config \$HOME/.oveconfig OVE_OS_PACKAGE_MANAGER_ARGS -S --noconfirm --noprogressbar'"
	elif [[ ${package_manager} == xbps-install* ]]; then
		container_exec "bash ${bash_opt} -c '${prefix}; ove-add-config \$HOME/.oveconfig OVE_OS_PACKAGE_MANAGER xbps-install -y'"
	elif [[ ${package_manager} == zypper* ]]; then
		container_exec "bash ${bash_opt} -c '${prefix}; ove-add-config \$HOME/.oveconfig OVE_OS_PACKAGE_MANAGER_ARGS install -y'"
	elif [[ ${package_manager} == dnf* ]]; then
		container_exec "bash ${bash_opt} -c '${prefix}; ove-add-config \$HOME/.oveconfig OVE_OS_PACKAGE_MANAGER_ARGS install -y'"
	elif [[ ${package_manager} == apk* ]]; then
		container_exec "bash ${bash_opt} -c '${prefix}; ove-add-config \$HOME/.oveconfig OVE_OS_PACKAGE_MANAGER_ARGS add --no-progress -q'"
	fi
}

function remove_tmp {
	find "${OVE_TMP:?}" -maxdepth 1 -type f -name "${tag:?}*" -exec rm {} \;
	return 0
}

function cleanup {
	if [[ ${OVE_DISTROCHECK_STEPS} == *running* ]]; then
		remove_tmp
		return
	fi
	run_no_exit "$(container_command)${container_global_flags} stop ${container_name}"
	if [[ ${OVE_DISTROCHECK_STEPS} == *stopped* ]]; then
		remove_tmp
		return
	fi
	run_no_exit "$(container_command)${container_global_flags} delete ${container_name} --force"
	remove_tmp
}

function setup_package_manager {
	local packman

	run "$(container_command)${container_global_flags} file pull ${container_name}/var/tmp/${tag}-packman ${OVE_TMP}/${tag}-packman"
	if [ ! -s "${OVE_TMP}/${tag}-packman" ]; then
		echo "error: could not determine package manager for ${distro}" 1>&2
		exit 1
	fi

	packman=$(cat "${OVE_TMP}/${tag}-packman")
	if [ "${packman}" = "apk" ]; then
		package_manager="apk add --no-progress -q"
		cat >> "${OVE_TMP}/${tag}-services.sh" <<EOF
if ! timeout 10 apk update > /dev/null 2>&1; then
	sed -i 's,https,http,g' /etc/apk/repositories
	if ! timeout 10 apk update > /dev/null 2>&1; then
		echo "error: apk update failed"
		exit 1
	fi
fi
EOF
	elif [ "${packman}" = "pacman" ]; then
		cat >> "${OVE_TMP}/${tag}-services.sh" <<EOF
pacman -Syu --noconfirm -q --noprogressbar
EOF
		package_manager="pacman -S --noconfirm -q --noprogressbar"
	elif [ "${packman}" = "apt-get" ]; then
		if [[ ${OVE_DISTROCHECK_STEPS} == *ove* ]]; then
			ove_packs="bsdmainutils procps "
		fi
		package_manager="apt-get -y -qq -o=Dpkg::Progress=0 -o=Dpkg::Progress-Fancy=false install"
		if [ -s "/etc/apt/apt.conf" ]; then
			cp -a "/etc/apt/apt.conf" "${OVE_TMP}/${tag}-apt.conf"
			container_file_push_root \
				"${OVE_TMP}/${tag}-apt.conf" \
				"${container_name}/etc/apt/apt.conf"
		fi
		echo "apt-get update >/dev/null 2>&1" >> "${OVE_TMP}/${tag}-services.sh"
	elif [ "${packman}" = "xbps" ]; then
		package_manager="xbps-install -y"
	elif [ "${packman}" = "dnf" ]; then
		package_manager="dnf install -y"
	elif [ "${packman}" = "zypper" ]; then
		package_manager="zypper install -y"
	else
		echo "error: unknown package manager for '${distro}'" 1>&2
		exit 1
	fi

	cat > "${OVE_TMP}/${tag}-packman" <<EOF
#!/usr/bin/env sh
${package_manager} "\$@"
EOF
	container_file_push_root \
		"${OVE_TMP}/${tag}-packman" \
		"${container_name}/sbin/packman" \
		"--mode 0755"
}

function lxd_cluster {
	# shellcheck disable=SC2086
	if "$(container_command)"${container_global_flags} cluster list &> /dev/null; then
		return 0
	else
		return 1
	fi
}

function setup_sshd {
	echo "${package_manager:?} openssh-server >/dev/null 2>&1" >> "${OVE_TMP}/${tag}-services.sh"
	echo "${package_manager} openssh >/dev/null 2>&1" >> "${OVE_TMP}/${tag}-services.sh"

	if [[ ${distro} == *opensuse* ]]; then
		echo "cp -a /usr/etc/ssh/sshd_config /etc/ssh/" >> "${OVE_TMP}/${tag}-services.sh"
	elif [[ ${distro} == *void* ]]; then
		echo "ln -s /etc/sv/sshd /var/service" >> "${OVE_TMP}/${tag}-services.sh"
	fi

	cat >> "${OVE_TMP}/${tag}-services.sh" <<EOF
if [ ! -s /etc/ssh/sshd_config ]; then
	echo 'error: could not find /etc/ssh/sshd_config' >&2
	exit 1
fi
if ! sed -i \
	-e 's,.*PermitRootLogin.*,PermitRootLogin yes,g' \
	-e 's,.*PermitUserEnvironment.*,PermitUserEnvironment yes,g' \
	-e 's,.*AllowAgentForwarding.*,AllowAgentForwarding yes,g' \
	-e 's,.*PasswordAuthentication.*,PasswordAuthentication yes,g' /etc/ssh/sshd_config; then
	exit 1
fi
EOF
	if [[ ${distro} == *alpine* ]]; then
		echo "rc-update add sshd >/dev/null 2>&1" >> "${OVE_TMP}/${tag}-services.sh"
		echo "/etc/init.d/sshd start >/dev/null 2>&1" >> "${OVE_TMP}/${tag}-services.sh"
	else
		for s in ssh sshd; do
			echo "systemctl -q restart $s >/dev/null 2>&1" >> "${OVE_TMP}/${tag}-services.sh"
			echo "systemctl -q enable $s >/dev/null 2>&1" >> "${OVE_TMP}/${tag}-services.sh"
		done
	fi

	cat >> "${OVE_TMP}/${tag}-services.sh" <<EOF
i=0
while true; do
	i=\$((i+1))
	if [ \$i -gt 100 ]; then
		echo "error: sshd did not start"
		exit 1
	elif pgrep -f sshd >/dev/null 2>&1; then
		sleep 1
		break
	fi
EOF
	if [[ ${OVE_DISTROCHECK_STEPS} == *verbose* ]]; then
		echo -e "\techo \"waiting for sshd \$i\"" >> "${OVE_TMP}/${tag}-services.sh"
	fi
	cat >> "${OVE_TMP}/${tag}-services.sh" <<EOF
	sleep 0.1
done
EOF

	if [[ ${OVE_DISTROCHECK_STEPS} == *verbose* ]]; then
		sed -i -e "1iset -x" "${OVE_TMP}/${tag}-services.sh"
	fi

	sed -i -e "1i#!/usr/bin/env sh" "${OVE_TMP}/${tag}-services.sh"
}

function setup_X_apk {
	cat >> "${OVE_TMP}/${tag}-services.sh" <<EOF
# install Xpra
packman xpra

# install Desktop Environment
setup-desktop ${OVE_DISTROCHECK_XPRA_DE}
EOF
}

function setup_X_deb {
	cat >> "${OVE_TMP}/${tag}-services.sh" <<EOF
# install wget
packman wget

# xpra keyring
wget -q -O /usr/share/keyrings/xpra.asc https://xpra.org/xpra.asc

# xpra.sources
codename=\$(. /etc/os-release; echo \${VERSION_CODENAME})
wget -q -O /etc/apt/sources.list.d/xpra.sources https://raw.githubusercontent.com/Xpra-org/xpra/master/packaging/repos/\${codename:?}/xpra.sources

# refresh package manager
apt-get update

# install packages
packman cron xfce4-session xfce4-terminal xpra
EOF
}

function setup_X_rpm {
	cat >> "${OVE_TMP}/${tag}-services.sh" <<EOF
# install wget
packman wget

# xpra.sources
id=\$(. /etc/os-release; echo \${ID})
echo "id=\$id"

if [ "\${id,,}" = "fedora" ]; then
	id="Fedora"
elif [[ "\${id,,}" == *centos* ]]; then
	id="CentOS-Stream"
elif [[ "\${id,,}" == *almalinux* ]]; then
	id="almalinux"
elif [[ "\${id,,}" == *rocky* ]]; then
	id="rockylinux"
else
	id="almalinux"
fi
wget -O /etc/yum.repos.d/xpra.repo https://raw.githubusercontent.com/Xpra-org/xpra/master/packaging/repos/\${id}/xpra.repo

# install config-manager plugin
packman dnf-plugins-core

# enable CRB
dnf config-manager --set-enabled crb

# EPEL
packman epel-release

# refresh package manager
dnf update -y

# packages
packs=""
packs+=" cronie"
packs+=" xpra"

# install packages
packman \${packs}

# install xfce
dnf groupinstall -y xfce
EOF
}

function update_ssh_config {
	local n
	local _user

	if [[ ${OVE_DISTROCHECK_STEPS} == *user* ]] && [ ${EUID} -ne 0 ]; then
		_user="${container_user}"
	else
		_user="root"
	fi

	if ! mkdir -p "${HOME}/.ssh"; then
		echo "error: mkdir ${HOME}/.ssh failed" 1>&2
		exit 1
	elif grep -q "^Host ${container_name}$" "${HOME}/.ssh/config"; then
		# insert on top of existing host
		n=$(grep -m 1 -n "^Host ${container_name}$" "${HOME}/.ssh/config" | cut -d: -f1)
		if ! sed -i -e "${n}iHost ${container_name}\n\tUser ${_user}\n\tHostName ${container_ip}\n\tStrictHostKeyChecking no\n" "${HOME}/.ssh/config"; then
			echo "error: not possible to update ${HOME}/.ssh/config" 1>&2
			exit 1
		fi
	else
		# append
		cat >> "${HOME}/.ssh/config" <<EOF
Host ${container_name}
	User ${_user}
	HostName ${container_ip}
	StrictHostKeyChecking no
EOF
	fi

	if [[ ( ${OVE_DISTROCHECK_STEPS} == *ssh* ) && \
		( ${OVE_DISTROCHECK_STEPS} != *user* ) ]]; then
		echo -e "\tUser root" >> "${HOME}/.ssh/config"
	fi
}

# $1: user
function setup_ssh {
	local pass="${RANDOM}${RANDOM}${RANDOM}"
	local _home

	_user="$1"

	if [ "${_user}" = "root" ]; then
		_home="/root"
		if [ "${OVE_DISTROCHECK_CONTAINER_ROOT_PASS}" != "" ]; then
			pass="${OVE_DISTROCHECK_CONTAINER_ROOT_PASS}"
		fi
	else
		_home="${HOME}"
		if [ "${OVE_DISTROCHECK_CONTAINER_USER_PASS}" != "" ]; then
			pass="${OVE_DISTROCHECK_CONTAINER_USER_PASS}"
		fi
	fi

	if [[ ${distro} == *alpine* ]]; then
		cat > "${OVE_TMP}/${tag}-passwd-${_user}" <<EOF
echo -e "${pass}\n${pass}" | passwd ${_user} &> /dev/null
EOF
		container_file_push_root \
			"${OVE_TMP}/${tag}-passwd-${_user}" \
			"${container_name}/var/tmp/${tag}-passwd-${_user}"

		# shellcheck disable=SC2097,SC2098
		use_ssh=0 _user=root container_exec "sh /var/tmp/${tag}-passwd-${_user}"
	else
		# shellcheck disable=SC2097,SC2098
		use_ssh=0 _user=root container_exec "usermod -p '$(openssl passwd -1 "${pass}")' ${_user}"
	fi

	CONTAINER_EXEC_EXTRA="--user ${_uid} --env HOME=${_home}" \
		use_ssh=0 \
		container_exec "mkdir -p .ssh"

	CONTAINER_EXEC_EXTRA="--user ${_uid} --env HOME=${_home}" \
		use_ssh=0 \
		container_exec "chmod 700 .ssh"

	_echo "copy public key to container"
	i=0
	while true; do
		((i++))
		if [ ${i} -gt 100 ]; then
			echo "error: not possible to copy public key to ${container_name} ${container_ip}" 1>&2
			exit 1
		fi

		# shellcheck disable=SC2086
		if ! sshpass -p${pass} \
			ssh-copy-id \
			-f \
			${ssh_opts} \
			"${_user}"@"${container_ip}" &> /dev/null; then
			_echo "copy public key to ${container_name} ${container_ip} failed - retry in 1 sec"
			sleep 1
			continue
		fi
		break
	done

	# from now on use ssh instead of exec
	use_ssh=1

	true > "${OVE_TMP}/${tag}-sshenv"
	for e in ftp_proxy http_proxy https_proxy; do
		if [ "x${!e}" = "x" ]; then
			continue
		fi
		echo "${e}=${!e}" >> "${OVE_TMP}/${tag}-sshenv"
	done

	if [ -s "${OVE_TMP}/${tag}-sshenv" ]; then
		# shellcheck disable=SC2086
		scp ${ssh_opts} -p -q "${OVE_TMP}/${tag}-sshenv" "${_user}"@"${container_ip}":.ssh/environment
	fi
}

# $1: uid or gid
function get_id {
	local i
	local _id
	local sleep_s

	i=0
	while true; do
		((i++))
		if [ $i -ge 30 ]; then
			echo "error: could not retreive $1 for ${container_user} for ${container_name}" 1>&2
			return 1
		fi
		_id=$(container_exec "id -${1::1} ${container_user}")
		if [ "x${_id}" = "x" ]; then
			sleep_s=$((RANDOM%10))
			echo "warning: empty $1, retry in ${sleep_s}s ($i)" 1>&2
			sleep ${sleep_s}
			continue
		fi
		break
	done
	_id=${_id//[$'\t\r\n']/}
	if [[ ! "${_id}" =~ ^[0-9]+$ ]]; then
		echo "error: weird $1 '${_id}'" 1>&2
		return 1
	fi

	echo "$_id"
}

function container_file_push_helper {
	local _cmd

	_cmd="$(container_command)${container_global_flags}"
	_cmd+=" file"
	_cmd+=" push"
	if [ $# -eq 3 ]; then
		_cmd+=" $3"
	fi

	if [[ "${FUNCNAME[1]}" == *_root ]]; then
		_cmd+=" --uid 0"
		_cmd+=" --gid 0"
	elif [[ "${FUNCNAME[1]}" == *_user ]]; then
		_cmd+=" --uid ${_uid:?}"
		_cmd+=" --gid ${_gid:?}"
	else
		echo "fatal: container_file_push_helper" 1>&2
		exit 1
	fi
	_cmd+=" $1"
	_cmd+=" $2"

	run "${_cmd}"
}

function container_file_push_root {
	container_file_push_helper "$@"
}

function container_file_push_user {
	container_file_push_helper "$@"
}

function main {
	local _cmd
	local _home="/root"
	local ove_packs
	local package_manager
	local prefix="true"
	local _uid=0
	local _gid=0
	local sul

	if ! init "$@"; then
		exit 1
	fi

	if [ "x${OVE_LAST_COMMAND}" != "x" ]; then
		# re-use date+time (ignore micro/nano) from OVE_LAST_COMMAND
		tag="${OVE_LAST_COMMAND##*/}"
		tag="${tag:0:18}"
	else
		tag="$(date '+%Y%m%d-%H%M%S%N')"
	fi

	if [ "x${OVE_DISTROCHECK_CONTAINER_NAME}" != "x" ]; then
		container_name="${OVE_DISTROCHECK_CONTAINER_NAME}"
	else
		container_name="${OVE_USER}-${tag}-${distro}"
		if [ "x${OVE_DISTROCHECK_CONTAINER_PREFIX}" != "x" ]; then
			container_name="${OVE_DISTROCHECK_CONTAINER_PREFIX}-${container_name}"
		fi

	fi

	_echo "info: replace all spaces, slashes, dots and underscores with hyphen-minus"
	container_name="${container_name// /-}"
	container_name="${container_name//\//-}"
	container_name="${container_name//./-}"
	container_name="${container_name//_/-}"

	if [ ${#container_name} -gt 63 ]; then
		_echo "info: $(container_command) name is ${#container_name} chars, max allowed is 63. Truncating."
		container_name=${container_name:0:63}
	fi

	while true; do
		if [ "${#container_name}" -eq 0 ]; then
			echo "error: $(container_command) name can not be empty" 1>&2
			exit 1
		elif [ "${container_name:0:1}" = "-" ]; then
			_echo "info: container name '${container_name}' can not start with hyphen-minus"
			container_name="${container_name:1}"
			continue
		elif [ "${container_name: -1}" = "-" ]; then
			_echo "info: container name '${container_name}' can not end with hyphen-minus"
			container_name="${container_name::-1}"
			continue
		fi

		break
	done

	# ephemeral container?
	if [[ ${OVE_DISTROCHECK_STEPS} != *running* ]] && \
		[[ ${OVE_DISTROCHECK_STEPS} != *stopped* ]]; then
			ephemeral=1
			OVE_DISTROCHECK_LAUNCH_EXTRA_ARGS+=" --ephemeral"
			OVE_DISTROCHECK_STEPS+=" stopped"
	fi

	if [[ ${distro} == *archlinux* ]] || [[ ${distro} == *fedora* ]]; then
		OVE_DISTROCHECK_LAUNCH_EXTRA_ARGS+=" -c security.nesting=true"
	fi

	_echo "$(container_command)${container_global_flags} launch images:${distro} ${container_name} ${OVE_DISTROCHECK_LAUNCH_EXTRA_ARGS//\#/ }"
	# shellcheck disable=SC2086
	if ! "$(container_command)"${container_global_flags} launch images:${distro} ${container_name} ${OVE_DISTROCHECK_LAUNCH_EXTRA_ARGS//\#/ } > /dev/null; then
		exit 1
	fi
	trap cleanup EXIT

	if [[ ${OVE_DISTROCHECK_STEPS} == *verbose* ]] && lxd_cluster; then
		# shellcheck disable=SC2086
		_echo "location:$("$(container_command)"${container_global_flags} list --format csv -cL "${container_name}")"
	fi

	cat > "${OVE_TMP}/${tag}-bootcheck.sh" <<EOF
#!/usr/bin/env sh

if [ ! -s /var/tmp/${tag}-packman ]; then
	if command -v apk > /dev/null; then
		packman="apk"
	elif command -v pacman > /dev/null; then
		packman="pacman"
	elif command -v apt-get > /dev/null; then
		packman="apt-get"
	elif command -v dnf > /dev/null; then
		packman="dnf"
	elif command -v zypper > /dev/null; then
		packman="zypper"
	elif command -v xbps-install > /dev/null; then
		packman="xbps"
	else
		echo "bootcheck: unknown package manager for ${distro}"
		packman="unknown"
	fi
	echo "\$packman" > /var/tmp/${tag}-packman
fi

if command -v systemctl > /dev/null; then
	cmd="systemctl is-system-running"
	exp="running"
elif command -v rc-status > /dev/null; then
	cmd="rc-status -r"
	exp="default"
elif command -v sv > /dev/null; then
	cmd="readlink -f /etc/runit/runsvdir/current"
	exp="/etc/runit/runsvdir/default"
elif command -v runlevel > /dev/null; then
	cmd="runlevel"
	exp="N 2"
else
	echo "bootcheck: unknown init system for ${distro} - sleep 1 sec"
	sleep 1
	exit 0
fi

i=0
while true; do
	i=\$((i+1))
	if [ \$i -ge 100 ]; then
		exit 0
	fi
	s=\$(\$cmd 2> /dev/null);
	if [ "x\$s" = "x\$exp" ]; then
		break
	fi
	sleep 0.1
done
exit 0
EOF
	if [[ ${OVE_DISTROCHECK_STEPS} == *verbose* ]]; then
		sed -i -e "2iset -x" "${OVE_TMP}/${tag}-bootcheck.sh"
	fi

	container_file_push_root \
		"${OVE_TMP}/${tag}-bootcheck.sh" \
		"${container_name}/var/tmp/${tag}-bootcheck.sh"
	container_exec_no_exit "sh /var/tmp/${tag}-bootcheck.sh"

	if [[ ( ${OVE_DISTROCHECK_STEPS} == *user* && ${EUID} -ne 0 ) || \
		( ${OVE_DISTROCHECK_STEPS} == *ssh* ) || \
		( ${OVE_DISTROCHECK_STEPS} == *ove* ) ]]; then
		setup_package_manager
		if [[ ${OVE_DISTROCHECK_STEPS} == *ssh* ]]; then
			setup_sshd
		fi
		if [[ ${OVE_DISTROCHECK_STEPS} == *X* ]]; then
			if [[ ${package_manager:?} == apt-get* ]];  then
				setup_X_deb
			elif [[ ${package_manager:?} == dnf* ]];  then
				setup_X_rpm
			elif [[ ${package_manager:?} == apk* ]];  then
				setup_X_apk
			else
				echo "error: X for distro '${distro}' is not supported" 1>&2
				exit 1
			fi
		fi
	fi

	if [ -s "${OVE_TMP}/${tag}-services.sh" ]; then
		container_file_push_root \
			"${OVE_TMP}/${tag}-services.sh" \
			"${container_name}/var/tmp/${tag}-services.sh"
		container_exec_no_exit "sh /var/tmp/${tag}-services.sh"
	fi

	if [[ ${OVE_DISTROCHECK_STEPS} == *ssh* ]]; then
		i=0
		while true; do
			((i++))
			if [ $i -ge 100 ]; then
				echo "error: no IPv4 address for ${container_name}" 1>&2
				exit 1
			fi

			# shellcheck disable=SC2086
			container_ip=$("$(container_command)"${container_global_flags} list -c4 --format csv ${container_name})
			container_ip=${container_ip% *}
			if [ "x${container_ip}" = "x" ]; then
				echo "waiting for IPv4 address for ${container_name} ($i)"
				sleep 1
				continue
			fi
			_echo "${container_name}=${container_ip}"

			if [[ ${OVE_DISTROCHECK_STEPS} == *ssh_config* ]]; then
				update_ssh_config
			fi
			break
		done

		setup_ssh "root"
	fi

	if [[ ${OVE_DISTROCHECK_STEPS} == *user* ]] && [ ${EUID} -ne 0 ]; then
		container_exec "${package_manager} bash"
		if [[ ${distro} == *alpine* ]]; then
			container_exec "${package_manager} shadow shadow-login sudo"
		fi

		container_exec "useradd --shell /bin/bash -m -d ${HOME:?} ${container_user:?}"

		if ! _uid=$(get_id "uid"); then
			exit 1
		elif ! _gid=$(get_id "gid"); then
			exit 1
		fi
		_home=${HOME}

		_echo "user: idmap"
		run "$(container_command)${container_global_flags} config set ${container_name} security.idmap.isolated true"
		run "$(container_command)${container_global_flags} config set ${container_name} security.idmap.base 200000000"

		# shellcheck disable=SC2086
		printf "uid %s ${_uid}\ngid %s ${_gid}" "$(id -u)" "$(id -g)" | \
			"$(container_command)"${container_global_flags} config set "${container_name}" raw.idmap -

		_echo "user: sudo"
		echo "${container_user} ALL=(ALL) NOPASSWD:ALL" > "${OVE_TMP}/${tag}-sudoers"
		container_file_push_root \
			"${OVE_TMP}/${tag}-sudoers" \
			"${container_name}/etc/sudoers.d/91-ove"

		if container_exec_no_exit "[ -s /etc/pam.d/su ]"; then
			sul=$(container_exec_no_exit "grep -n '^auth.*sufficient.*pam_rootok.so' /etc/pam.d/su" | cut -d: -f1)
			if [ "${sul}" = "" ]; then
				_echo "warning: user: could not get auth line number from '/etc/pam.d/su'"
			else
				_echo "user: su: update '/etc/pam.d/su' to allow su without passwd"
				sul=$((sul + 1))
				use_ssh=0 _user=root container_exec_no_exit "sed -i '${sul}iauth  [success=ignore default=1] pam_succeed_if.so user = root' /etc/pam.d/su"
				sul=$((sul + 1))
				use_ssh=0 _user=root container_exec_no_exit "sed -i '${sul}iauth sufficient pam_succeed_if.so use_uid user = ${container_user}' /etc/pam.d/su"
				_echo "user: su: add '${container_user}' to 'root' group"
				use_ssh=0 _user=root container_exec_no_exit "usermod -a -G root ${container_user}"
			fi
		fi

		run "$(container_command)${container_global_flags} restart ${container_name}"
		use_ssh=0 container_exec "sh /var/tmp/${tag}-bootcheck.sh"

		if [[ ${OVE_DISTROCHECK_STEPS} == *ssh* ]]; then
			cat > "${OVE_TMP}/${tag}-wait-for-sshd.sh" <<EOF
#!/usr/bin/env sh

i=0
while true; do
	i=\$((i+1))
	if [ \$i -gt 100 ]; then
		echo "error: sshd did not start"
		exit 1
	elif pgrep -f sshd > /dev/null; then
		sleep 1
		break
	fi

	echo "waiting for sshd \$i"
	sleep 0.1
done
EOF

			if [[ ${OVE_DISTROCHECK_STEPS} == *verbose* ]]; then
				sed -i -e "2iset -x" "${OVE_TMP}/${tag}-wait-for-sshd.sh"
			fi

			container_file_push_root \
				"${OVE_TMP}/${tag}-wait-for-sshd.sh" \
				"${container_name}/var/tmp/${tag}-wait-for-sshd.sh"
			use_ssh=0 container_exec "sh /var/tmp/${tag}-wait-for-sshd.sh"
			setup_ssh "${container_user}"
		fi
	fi

	if [[ ${OVE_DISTROCHECK_STEPS} == *ove* ]]; then
		ove_packs+="bash bzip2 git curl file binutils util-linux coreutils tar make"

		# install OVE packages
		_user=root container_exec "${package_manager} ${ove_packs} >/dev/null 2>&1"

		if [[ ${distro} == *archlinux* ]]; then
			container_exec "sed -i 's|#en_US.UTF-8 UTF-8|en_US.UTF-8 UTF-8|g' /etc/locale.gen"
			container_exec "locale-gen"
		fi
	fi

	if [[ ${OVE_DISTROCHECK_STEPS} == *user* ]] && [ ${EUID} -ne 0 ]; then
		# from now on, run all exec commands as user
		export CONTAINER_EXEC_EXTRA="--user ${_uid} --env HOME=${HOME}"
	fi

	if [ "${OVE_DISTROCHECK_XPRA_SERVER_ARGS}" = "" ]; then
		OVE_DISTROCHECK_XPRA_SERVER_ARGS=""
		OVE_DISTROCHECK_XPRA_SERVER_ARGS+=" start-desktop"
		OVE_DISTROCHECK_XPRA_SERVER_ARGS+=" :100"
		OVE_DISTROCHECK_XPRA_SERVER_ARGS+=" --exit-with-children"
		OVE_DISTROCHECK_XPRA_SERVER_ARGS+=" --microphone=no"
		OVE_DISTROCHECK_XPRA_SERVER_ARGS+=" --opengl=no"
		OVE_DISTROCHECK_XPRA_SERVER_ARGS+=" --printing=no"
		OVE_DISTROCHECK_XPRA_SERVER_ARGS+=" --resize-display=FHD"
		OVE_DISTROCHECK_XPRA_SERVER_ARGS+=" --speaker=no"
		OVE_DISTROCHECK_XPRA_SERVER_ARGS+=" --webcam=no"
		OVE_DISTROCHECK_XPRA_SERVER_ARGS+=" --start-child=${OVE_DISTROCHECK_XPRA_DE_CMD:?}"
	fi

	if [[ ${OVE_DISTROCHECK_STEPS} == *X* ]]; then
		# let cron start Xpra on reboot
		container_exec "echo @reboot xpra ${OVE_DISTROCHECK_XPRA_SERVER_ARGS:?} | crontab -"
		run "$(container_command)${container_global_flags} restart ${container_name}"
		use_ssh=0 _user=root container_exec "sh /var/tmp/${tag}-bootcheck.sh"

		if [ "${OVE_DISTROCHECK_XPRA_CLIENT_ARGS}" != "" ]; then
			i=0
			while true; do
				((i++))
				if [ $i -ge 10 ]; then
					echo "error: xpra server not alive" 1>&2
					exit 1
				elif ! xpra info --ssh="ssh" ssh:"${container_name}" &> /dev/null; then
					sleep $((RANDOM % 3 + 1))
					continue
				fi
				break
			done

			# shellcheck disable=SC2086
			xpra ${OVE_DISTROCHECK_XPRA_CLIENT_ARGS:?} \
				--ssh="ssh" ssh:"${container_name}" \
				--title "${container_name} ${container_ip}" &
			xpra_pid="$!"
		fi
	fi

	if [[ ${OVE_DISTROCHECK_STEPS} == *ove* ]]; then
		# gitconfig
		if [ -s "${HOME}"/.gitconfig ]; then
			cp -a "${HOME}"/.gitconfig "${OVE_TMP}/${tag}-gitconfig"
			container_file_push_user \
				"${OVE_TMP}/${tag}-gitconfig" \
				"${container_name}${_home}/.gitconfig"
		fi

		# oveconfig
		if [ -s "${HOME}"/.oveconfig ]; then
			cp -a "${HOME}"/.oveconfig "${OVE_TMP}/${tag}-oveconfig"
			container_file_push_user \
				"${OVE_TMP}/${tag}-oveconfig" \
				"${container_name}${_home}/.oveconfig"
		fi

		# ove.bash
		if [ -s "${HOME}"/.ove.bash ]; then
			cp -a "${HOME}"/.ove.bash "${OVE_TMP}/${tag}-ove.bash"
			container_file_push_user \
				"${OVE_TMP}/${tag}-ove.bash" \
				"${container_name}${_home}/.ove.bash"
		fi

		if [[ ${OVE_DISTROCHECK_STEPS} == *user* ]]; then
			# expose OVE workspace
			run "$(container_command)${container_global_flags} config device add ${container_name} ove-base disk source=${OVE_BASE_DIR} path=${OVE_BASE_DIR}"
			run "$(container_command)${container_global_flags} config device add ${container_name} ove-tmp disk source=${OVE_TMP} path=${OVE_TMP}"
			run "$(container_command)${container_global_flags} config device add ${container_name} ove-state disk source=${OVE_GLOBAL_STATE_DIR} path=${OVE_GLOBAL_STATE_DIR}"
			ws_name="${OVE_BASE_DIR}"
			prefix="cd ${ws_name}; source ove hush"
		else
			if [ -x "${OVE_OWEL_DIR}/SETUP" ]; then
				container_file_push_user \
					"${OVE_OWEL_DIR}/SETUP" \
					"${container_name}${_home}/SETUP"
				container_exec "bash ${_home}/SETUP"
			else
				container_exec "bash -c '$(ove-oneliner)'"
			fi
			ws_name=$(container_exec "bash -c 'find -mindepth 2 -maxdepth 2 -name .owel' | cut -d/ -f2")
			ws_name=${ws_name//[$'\t\r\n']/}
			if [ "x${ws_name}" = "x" ]; then
				ws_name="ove-tutorial"
				_echo "using ${ws_name} as OVE workspace (fallback)"
				container_exec "bash -c 'curl -sSL https://raw.githubusercontent.com/Ericsson/ove/master/setup | bash -s ${ws_name} https://github.com/Ericsson/${ws_name}'"
			fi
			prefix="cd ${ws_name}; source ove hush"
		fi

		if [ ${unittest} -eq 1 ]; then
			container_exec "bash ${bash_opt} -c 'cd ${ws_name}; source ove'"
			container_exec "bash ${bash_opt} -c '${prefix}; ove-env'"
			container_exec "bash ${bash_opt} -c '${prefix}; ove-list-externals'"
			container_exec "bash ${bash_opt} -c '${prefix}; ove-status'"
		fi

		package_manager_noconfirm
		if [ ${unittest} -eq 0 ] && [[ ${distro} == *opensuse* ]]; then
			container_exec "sudo zypper install -y -t pattern devel_basis"
		fi
	fi

	if [ ${unittest} -eq 1 ]; then
		export CONTAINER_EXEC_EXTRA="--user 0 --env HOME=${HOME}"

		container_exec "${package_manager} python3"
		if [[ ${distro} == *alpine* ]]; then
			container_exec "${package_manager} py3-yaml"
		elif [[ ${distro} == *archlinux* ]]; then
			container_exec "${package_manager} python-yaml"
		elif [[ ${distro} == *opensuse* ]]; then
			container_exec "${package_manager} python3-PyYAML"
		else
			container_exec "${package_manager} python3-yaml"
		fi

		# from now on, run all exec commands as user
		export CONTAINER_EXEC_EXTRA="--user ${_uid} --env HOME=${HOME}"
		container_file_push_user \
			"$(command -v shunit2)" \
			"${container_name}/var/tmp/shunit2"

		container_exec "bash ${bash_opt} -c '${prefix}; ove-unittest $OVE_UNITTEST_TC'"
	fi

	if [ "x${distcheck}" != "x" ]; then
		if [[ ${OVE_DISTROCHECK_STEPS} == *ove* ]]; then
			# sanity check project
			if ! container_exec_no_exit "bash ${bash_opt} -c '${prefix}; ove-list-projects ${distcheck} > /dev/null'"; then
				exit 1
			fi

			packs=$(container_exec "bash ${bash_opt} -c '${prefix}; DEBIAN_FRONTEND=noninteractive ove-list-needs ${distcheck}'")
			packs=${packs//[$'\t\r\n']/ }
			if [ "${packs}" != "" ]; then
				_user=root CONTAINER_EXEC_EXTRA="--user 0" container_exec "${package_manager} ${packs}"
			fi

			# worktree?
			if [[ ${OVE_DISTROCHECK_STEPS} == *worktree* ]]; then
				container_exec "bash ${bash_opt} -c '${prefix}; ove-add-config ${_home}/.oveconfig OVE_REVTAB_CHECK 0'"
				if [[ ${OVE_DISTROCHECK_STEPS} == *user* ]]; then
					worktree_dir="${OVE_TMP}/${tag}"
				else
					worktree_dir="/var/tmp/${tag}"
				fi

				container_exec "bash ${bash_opt} -c '${prefix}; ove-worktree add ${worktree_dir}'"
				# configurable?
				container_exec "bash ${bash_opt} -c '${prefix}; ove-replicate localhost ${worktree_dir}'"
				prev_prefix="${prefix}"
				prefix="cd ${worktree_dir}; source ove hush"
			fi

			container_exec "bash ${bash_opt} -c '${prefix}; OVE_AUTO_CLONE=1 ove distcheck ${distcheck}'"

			# remove the worktree if ephemeral
			if [[ ${OVE_DISTROCHECK_STEPS} == *worktree* ]]; then
				if [ ${ephemeral} -eq 0 ]; then
					_echo "the worktree '${worktree_dir}' is kept intact"
				else
					container_exec "bash ${bash_opt} -c '${prev_prefix}; ove-worktree remove ${worktree_dir}'"
				fi
			fi
		else
			if [ -s "${distcheck}" ]; then
				cp -a "${distcheck}" "${OVE_TMP}/${tag}.cmd"
			else
				echo "${distcheck}" > "${OVE_TMP}/${tag}.cmd"
			fi
			chmod +x "${OVE_TMP}/${tag}.cmd"
			container_file_push_root \
				"${OVE_TMP}/${tag}.cmd" \
				"${container_name}/var/tmp/${tag}.cmd"
			container_exec "/var/tmp/${tag}.cmd"
		fi
	fi

	if [[ ${OVE_DISTROCHECK_STEPS} == *X* ]] && kill -0 ${xpra_pid} 2> /dev/null; then
		wait ${xpra_pid}
	fi
}

main "$@"
